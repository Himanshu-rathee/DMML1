pl.hist <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count..))
print(pl.hist)
# lables
pl.lables <- pl.hist + xlab('Movie Rating') + ylab('Count')
print(pl.lables)
# title
pl.title <- pl.lables + ggtitle('Movie Rating Plot')
print(pl.title)
remove(list = ls())
# reading the gdp file
data <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Time-Series/GDP_Ireland.csv")
View(data)
View(data)
str(data)
summary(data)
# converting the predictor to billion figures
data$Gross.Domestic.Product..GDP. <- data$Gross.Domestic.Product..GDP./1000000000
summary(data)
remove(list = ls())
# reading the gdp file
data <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Time-Series/GDP_Ireland.csv")
str(data)
summary(data)
# converting the predictor to billion figures
data$Gross.Domestic.Product..GDP. <- data$Gross.Domestic.Product..GDP./1000000000
summary(data)
remove(list = ls())
bank <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/Bank.CSV")
View(bank)
View(bank)
bank.fit <- glm(Direct~Balance, data = bank, family = "binary")
bank.fit <- glm(Direct~Balance, data = bank, family = "binomial")
summary(bank.fit)
bank.fit$coefficients
exp(bank.fit$coefficients)
bank <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/65_Movies_Profit.sav")
movie <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/65_Movies_Profit.sav")
remove(list = ls())
movie <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/65_Movies_Profit.sav")
View(movie)
library(haven)
movie <- read_sav("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/65_Movies_Profit.sav")
View(movie)
summary(movie)
movie.fit <- glm(Profit~Budjet+Theaters+Opinion, data = movie, family = "binomial")
movie.fit <- glm(Profit~Budget+Theaters+Opinion, data = movie, family = "binomial")
summary(movie.fit)
movie.fit$coefficients
exp(movie.fit$coefficients)
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(movie.fit)
hoslem.test(movie$Profit,movie.fit, g = 10)
lake <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/Lakeland.CSV")
summary(lake)
lake <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Lab8/Lakeland.CSV")
summary(lake)
lake.fit <- glm(Profit~Budget+Theaters+Opinion, data = lake, family = "binomial")
View(lake)
lake.fit <- glm(Return~Program+GPA, data = lake, family = "binomial")
summary(lake.fit)
lake.fit$coefficients
exp(lake.fit$coefficients)
lake.fitG <- glm(Return~GPA, data = lake, family = "binomial")
summary(lake.fitG)
predict(object = lake.fit, c(2.5,0))
predict(object = lake.fit, data.frame(c(2.5,0))
predict(object = lake.fit, data.frame(c(2.5,0)))
st <- predict(object = lake.fit, data.frame(c(2.5,0)))
remove(list = ls())
# reading the gdp file
data <- read.csv("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Time-Series/GDP_Ireland.csv")
str(data)
summary(data)
# converting the predictor to billion figures
data$Gross.Domestic.Product..GDP. <- data$Gross.Domestic.Product..GDP./1000000000
summary(data)
# sorting the data
data <- data[order(data$Year),]
row.names(data) <- 1:49
# creating time series data and analysing
gdp <- ts(data = data$Gross.Domestic.Product..GDP., start = 1970, end = 2018, frequency = 1)
summary(gdp)
summary(gdp)
source('~/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Time-Series/TimeSeries_final.R', echo=TRUE)
checkresiduals(ddgdp.2)
checkresiduals(ddgdp.3.auto)
checkresiduals(ddgdp.2)
checkresiduals(gdp.3.holt.d)
ddgdp.2
checkresiduals(ddgdp.2)
par(mfrow = c(2,2))
# checking the plots - examining the error, trend, seasonality
plot(gdp, main = "Normal")
library(fpp2)
# smotthing the plot for checking Moving average
plot(ma(gdp,3), main = "q = 3")
plot(ma(gdp,5), main = "q = 5")
plot(ma(gdp,7), main = "q = 7")
# Models Expential Smoothing
par(mfrow = c(1,1))
# Holts Linear Trend Model 2 (level + trend)-
gdp.2.ets <- ets(gdp,model = "AAN")
gdp.2.ets
round(accuracy(gdp.2.ets),3)
# Holts Model with damped Trend Model 3 (level + trend + damped)-
gdp.3.holt.d <- holt(gdp, h = 3, damped = TRUE, PI=FALSE)
gdp.3.holt.d
round(accuracy(gdp.3.holt.d),3) ######------BEST ETS-----######
# Auto ETS method Model
gdp.ets <- ets(gdp, model = "ZZZ")
gdp.ets
round(accuracy(gdp.ets),3)
autoplot(gdp)
# checking best number of difference in time series
ndiffs(gdp) # 2
# diff = 1
dgdp <- diff(gdp)
autoplot(dgdp)
# checking stationarity
library(tseries)
adf.test(dgdp) # not stationary
autoplot(dgdp)
# Chossing p and q value
ggtsdisplay(ddgdp)
# Chossing p and q value
ggtsdisplay(ddgdp, main = "asdf")
# Chossing p and q value
ggtsdisplay(ddgdp, main = "Difference = 2")
# Checking auto ARIMA
ddgdp.3.auto <- auto.arima(gdp)
ddgdp.3.auto
# Auto ETS method Model
gdp.ets <- ets(gdp, model = "ZZZ")
gdp.ets
# Holts Linear Trend Model 2 (level + trend)-
gdp.2.ets <- ets(gdp,model = "AAN")
gdp.2.ets
round(accuracy(gdp.2.ets),3)
# checking best number of difference in time series
ndiffs(gdp) # 2
adf.test(dgdp) # not stationary
gdp.3.holt.d
# Holts Model with damped Trend Model 3 (level + trend + damped)-
gdp.3.holt.d <- holt(gdp, h = 3, damped = TRUE, PI=FALSE)
gdp.3.holt.d
round(accuracy(gdp.3.holt.d),3) ######------BEST ETS-----######
round(accuracy(gdp.3.holt.d),2) ######------BEST ETS-----######
round(accuracy(ddgdp.2),2) #####-------BEST---------############
ddgdp.2
summary(ddgdp.2)
checkresiduals(ddgdp.2)
# Evaluating model
par(mfrow = c(1,1))
qqnorm(ddgdp.2$residuals,main = "Arima (p,d,q) = (4,2,0)")
qqline(ddgdp.2$residuals)
Box.test(ddgdp.2, type = "Ljung-Box")
Box.test(ddgdp.2$residuals, type = "Ljung-Box")
setwd("/Users/sobil/Documents/MSC/Sem 1/Data Mining & Machine Learning/Project/DM_DATA_SETS")
remove(list = ls())
library(psych)
library(leaps)
library(car)
# reading the raw csv file
kc_house <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# exploratory analysis
head(kc_house)
str(kc_house)
summary(kc_house)
# cleaning & removing the unrelated and insignificant data
# removing id
kc_house <- kc_house[,-c(1)]
# coverting the date field type from chr to date
kc_house$date <- as.Date(kc_house$date, format = "%Y%m%d")
summary(kc_house$date)
# Range => Min date - "2014-05-02" to Max = "2015-05-27"
# Almost for the same duration of time, so the sample is unbiased
# remove date
kc_house <- kc_house[,-c(1)]
# removing the lat, long, zipcode
kc_house <- kc_house[,-c(15,16,17)]
# sqft_living, sqft_lot are related and can calculate sqft_living15, sqft_lot15 resp.
kc_house <- kc_house[,-c(15,16)]
# converting the waterfront to factors (0,1)
table(kc_house$waterfront)
kc_house$waterfront <- as.factor(kc_house$waterfront)
# cheking NAs
apply(X = kc_house,MARGIN =  2, FUN = function(col) any(is.na(col))) # no NAs
# checking distribution & outliers of dependent value
par(mfrow = c(1,2))
hist(kc_house$price,
col="orange",
border="black",
prob = TRUE,
xlab = "House prices",
main = "Histogram")
lines(density(kc_house$price),
lwd = 2,
col = "chocolate3") # not distributed normally - right skewed
plot(kc_house$price, main = "Scatter plot", ylab = "House prices")
# covert to log
hist(log(kc_house$price),
col="orange",
border="black",
prob = TRUE,
xlab = "House prices",
main = "Histogram")
lines(density(log(kc_house$price)),
lwd = 2,
col = "chocolate3") # not distributed normally
plot(log(kc_house$price), main = "Scatter plot", ylab = "House prices")
# creating a new data frame with correlated variable only
kc_house_log <- kc_house
kc_house_log$price <- log(kc_house_log$price)
summary(kc_house_log)
# checking correlation
pairs.panels(kc_house_log)
# removing very less correlated variable by creating a new df
house <- kc_house_log
# remove sqft_lot, waterfront, condition, yr_built, yr_renovated i.e columns (5,7,9,13,14)
house <- house[,-c(5,7,9,13,14)]
lm.fit1 <- lm(price ~ ., data = house)
summary(lm.fit1)
plot(lm.fit1)
par(mfrow = c(2,2))
plot(lm.fit1)
# exploring data
summary(house)
# exploring each colmuns
table(house$bedrooms)
subset(house, bedrooms =33)
house[house$bedrooms == 33,]
house[-house$bedrooms == 33,]
house[house$bedrooms == 33,]
house[house$bedrooms != 33,]
house <- house[house$bedrooms != 33,]
# Model the linear model
# simple model
lm.fit1 <- lm(price ~ ., data = house)
summary(lm.fit1)
par(mfrow = c(2,2))
plot(lm.fit1)
# exploring data
summary(house)
table(house$bathrooms) # 33 bedroom seems to be a influential point
table(house$view) # 33 bedroom seems to be a influential point
# Model the linear model
# simple model
lm.fit1 <- lm(price ~ ., data = house)
summary(lm.fit1)
# Model the linear model
# simple model
lm.fit1 <- lm(price ~ ., data = house)
summary(lm.fit1)
par(mfrow = c(2,2))
plot(lm.fit1)
par(mfrow = c(2,2))
plot(lm.fit1)
row.names(house) <- 1:21612
# Model the linear model
# simple model
lm.fit1 <- lm(price ~ ., data = house)
summary(lm.fit1)
par(mfrow = c(2,2))
plot(lm.fit1)
# fit 2
house.fit2 <- update(house.fit1, ~ . - sqft_basement + bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above + log(bedrooms) + log(bathrooms) + log(sqft_living) + log(floors) + log(view) + log(grade) + log(sqft_above), data = house)
# Model the linear model
# simple model
house.fit1 <- lm(price ~ ., data = house)
summary(house.fit1)
par(mfrow = c(2,2))
plot(house.fit1)
# fit 2
house.fit2 <- update(house.fit1, ~ . - sqft_basement + bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above + log(bedrooms) + log(bathrooms) + log(sqft_living) + log(floors) + log(view) + log(grade) + log(sqft_above), data = house)
# fit 2
house.fit2 <- lm(price ~ bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above + log(bedrooms) + log(bathrooms) + log(sqft_living) + log(floors) + log(view) + log(grade) + log(sqft_above), data = house)
summary(house.fit2)
# fit 2
house.fit2 <- lm(price ~ bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above + log(bedrooms) + log(bathrooms) + log(sqft_living) + log(floors) + log(view) + log(grade) + log(sqft_above), data = house)
# fit 2
house.fit2 <- lm(price ~ bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above, data = house)
summary(house.fit2)
summary(house.fit2)
# fit 2
house.fit2 <- lm(price ~ bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above, data = house)
# fit 2
house.fit2 <- lm(price ~ bedrooms*bathrooms*sqft_living*floors*view*grade*sqft_above, data = house)
summary(house.fit2)
# fit 2
house.fit2 <- lm(price ~ . + log(bedrooms), data = house)
# fit 2
house.fit2 <- lm(price ~ . + (log(bedrooms)), data = house)
# fit 2
house.fit2 <- lm(price ~ . + I(bedrooms^2), data = house)
summary(house.fit2)
# fit 2
house.fit2 <- lm(price ~ . + I(bedrooms^3), data = house)
summary(house.fit2)
# fit 2
house.fit2 <- update(house.fit1, ~ . - sqft_basement)
summary(house.fit2)
# fit 3
house.fit3 <- update(house.fit2, ~ . + I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(floors^2) + + I(view^2) + + I(grade^2) + + I(sqft_above^2))
summary(house.fit3)
View(house)
View(house)
# fit 3
house.fit3 <- update(house.fit2, ~ . + I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(floors^2) + I(view^2) + + I(grade^2) + I(sqft_above^2) -floors)
summary(house.fit3)
# fit 3
house.fit3 <- update(house.fit2, ~ . + I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(floors^2) + I(view^2) + + I(grade^2) + I(sqft_above^2) - floors - view)
summary(house.fit3)
setwd("/Users/sobil/Documents/MSC/Sem 1/Data Mining & Machine Learning/Project/DM_DATA_SETS")
remove(list = ls())
library(psych)
library(leaps)
library(car)
# reading the raw csv file
kc_house <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# exploratory analysis
head(kc_house)
str(kc_house)
summary(kc_house)
# cleaning & removing the unrelated and insignificant data
# removing id
kc_house <- kc_house[,-c(1)]
# coverting the date field type from chr to date
kc_house$date <- as.Date(kc_house$date, format = "%Y%m%d")
summary(kc_house$date)
# Range => Min date - "2014-05-02" to Max = "2015-05-27"
# Almost for the same duration of time, so the sample is unbiased
# remove date
kc_house <- kc_house[,-c(1)]
# removing the lat, long, zipcode
kc_house <- kc_house[,-c(15,16,17)]
# sqft_living, sqft_lot are related and can calculate sqft_living15, sqft_lot15 resp.
kc_house <- kc_house[,-c(15,16)]
# converting the waterfront to factors (0,1)
table(kc_house$waterfront)
kc_house$waterfront <- as.factor(kc_house$waterfront)
# cheking NAs
apply(X = kc_house,MARGIN =  2, FUN = function(col) any(is.na(col))) # no NAs
# checking distribution & outliers of dependent value
par(mfrow = c(1,2))
hist(kc_house$price,
col="orange",
border="black",
prob = TRUE,
xlab = "House prices",
main = "Histogram")
lines(density(kc_house$price),
lwd = 2,
col = "chocolate3") # not distributed normally - right skewed
plot(kc_house$price, main = "Scatter plot", ylab = "House prices")
# covert to log
hist(log(kc_house$price),
col="orange",
border="black",
prob = TRUE,
xlab = "House prices",
main = "Histogram")
lines(density(log(kc_house$price)),
lwd = 2,
col = "chocolate3") # not distributed normally
plot(log(kc_house$price), main = "Scatter plot", ylab = "House prices")
# creating a new data frame with correlated variable only
kc_house_log <- kc_house
kc_house_log$price <- log(kc_house_log$price)
summary(kc_house_log)
# removing very less correlated variable by creating a new df
house <- kc_house_log
# remove sqft_lot, floors, waterfront, view, condition, sqft_basement, yr_built,
#yr_renovated i.e columns (5,6,7,8,9,13,14)
house <- house[,-c(5,6,7,8,9,13,14)]
# exploring data
summary(house)
# exploring each colmuns
table(house$bedrooms) # 33 bedroom seems to be a influential point
house <- house[house$bedrooms != 33,]
table(house$bathrooms)
table(house$view)
row.names(house) <- 1:21612
# Model the linear model
# simple model
house.fit1 <- lm(price ~ ., data = house)
summary(house.fit1)
par(mfrow = c(2,2))
plot(house.fit1)
# exploring data
summary(house)
# removing very less correlated variable by creating a new df
house <- kc_house_log
# remove sqft_lot, floors, waterfront, view, condition, sqft_basement, yr_built,
#yr_renovated i.e columns (5,6,7,8,9,13,14)
house <- house[,-c(5,6,7,8,9,12,13,14)]
# exploring data
summary(house)
# exploring each colmuns
table(house$bedrooms) # 33 bedroom seems to be a influential point
house <- house[house$bedrooms != 33,]
table(house$bathrooms)
table(house$view)
row.names(house) <- 1:21612
# Model the linear model
# simple model
house.fit1 <- lm(price ~ ., data = house)
summary(house.fit1)
par(mfrow = c(2,2))
plot(house.fit1)
# fit 2
house.fit2 <- update(house.fit1, ~ .  I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(grade^2) + I(sqft_above^2))
# fit 2
house.fit2 <- update(house.fit1, ~ . + I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(grade^2) + I(sqft_above^2))
summary(house.fit2)
h
# fit 3
house.fit3 <- update(house.fit2, ~ . + bedrooms:bathrooms + bathrooms:sqft_living + sqft_living:bedrooms + grade:bathrooms + grade:sqft_living + grade:bedrooms + sqft_above:grade + sqft_above:bedrooms + sqft_above:bathrooms + sqft_above:sqft_living)
summary(house.fit3)
# fit 4
house.fit4 <- step(house.fit3)
summary(house.fit4)
# fit 4
house.fit4 <- update(house.fit2, ~ . + bedrooms:bathrooms:sqft_living)
summary(house.fit4)
# fit 3
house.fit3 <- update(house.fit2, ~ . + bedrooms:bathrooms + bathrooms:sqft_living + sqft_living:bedrooms + grade:bathrooms + grade:sqft_living + grade:bedrooms + sqft_above:grade + sqft_above:bedrooms + sqft_above:bathrooms + sqft_above:sqft_living)
summary(house.fit3)
# fit 4
house.fit4 <- update(house.fit2, ~ . + bedrooms:bathrooms:sqft_living)
summary(house.fit4)
# fit 4
house.fit4 <- update(house.fit3, ~ . + bedrooms:bathrooms:sqft_living)
summary(house.fit4)
# exploring data
summary(house)
# Model the linear model
# simple model
house.fit1 <- lm(price ~ bedrooms*bathrooms*sqft_living*grade*sqft_above, data = house)
summary(house.fit1)
# fit 2
house.fit2 <- update(house.fit1, ~ . + I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(grade^2) + I(sqft_above^2))
summary(house.fit2)
# fit 3
house.fit3 <- update(house.fit2, ~ . + I(bedrooms^3) + I(bathrooms^3) + I(sqft_living^3) + I(grade^3) + I(sqft_above^3))
summary(house.fit3)
# fit 4
house.fit4 <- update(house.fit3, ~ . + I(bedrooms^0.5) + I(bathrooms^0.5) + I(sqft_living^0.5) + I(grade^0.5) + I(sqft_above^0.5))
summary(house.fit4)
# fit 4
house.fit5 <- update(house.fit3, ~ . + log(bedrooms))
# fit 4
house.fit5 <- step(house.fit4)
summary(house.fit5)
house.fit6 <- update(house.fit5, ~ . - bedrooms:sqft_above - bedrooms:sqft_living - bedrooms:bathrooms)
summary(house.fit6)
# fit 4 : step function
house.fit7 <- step(house.fit6)
summary(house.fit7)
# fit 4 : step function
house.fit7 <- update(house.fit6, ~ . - bathrooms)
summary(house.fit7)
# check the best fit
bstFits1 <- regsubsets(price ~ bedrooms + sqft_living + grade + sqft_above +
I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(sqft_above^2) +
I(bedrooms^3) + I(bathrooms^3) + I(sqft_living^3) + I(grade^3) +
I(sqft_above^3) + I(bedrooms^0.5) + I(bathrooms^0.5) + I(grade^0.5) +
bathrooms:sqft_living + bedrooms:grade + bathrooms:grade +
sqft_living:grade + bathrooms:sqft_above + sqft_living:sqft_above +
grade:sqft_above + bedrooms:bathrooms:sqft_living + bedrooms:bathrooms:sqft_above +
bathrooms:sqft_living:sqft_above + bathrooms:grade:sqft_above +
sqft_living:grade:sqft_above, data = house, nbest = 2, nvmax = 5)
par(mfrow = c(1,1))
subsets(bstFits1, statistic = "adjr2")
# check the best fit
bstFits1 <- regsubsets(price ~ bedrooms + sqft_living + grade + sqft_above +
I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(sqft_above^2) +
I(bedrooms^3) + I(bathrooms^3) + I(sqft_living^3) + I(grade^3) +
I(sqft_above^3) + I(bedrooms^0.5) + I(bathrooms^0.5) + I(grade^0.5) +
bathrooms:sqft_living + bedrooms:grade + bathrooms:grade +
sqft_living:grade + bathrooms:sqft_above + sqft_living:sqft_above +
grade:sqft_above + bedrooms:bathrooms:sqft_living + bedrooms:bathrooms:sqft_above +
bathrooms:sqft_living:sqft_above + bathrooms:grade:sqft_above +
sqft_living:grade:sqft_above, data = house, nbest = 1, nvmax = 5)
par(mfrow = c(1,1))
subsets(bstFits1, statistic = "adjr2")
# check the best fit
bstFits1 <- regsubsets(price ~ bedrooms + sqft_living + grade + sqft_above +
I(bedrooms^2) + I(bathrooms^2) + I(sqft_living^2) + I(sqft_above^2) +
I(bedrooms^3) + I(bathrooms^3) + I(sqft_living^3) + I(grade^3) +
I(sqft_above^3) + I(bedrooms^0.5) + I(bathrooms^0.5) + I(grade^0.5) +
bathrooms:sqft_living + bedrooms:grade + bathrooms:grade +
sqft_living:grade + bathrooms:sqft_above + sqft_living:sqft_above +
grade:sqft_above + bedrooms:bathrooms:sqft_living + bedrooms:bathrooms:sqft_above +
bathrooms:sqft_living:sqft_above + bathrooms:grade:sqft_above +
sqft_living:grade:sqft_above, data = house, nbest = 1, nvmax = 4)
par(mfrow = c(1,1))
subsets(bstFits1, statistic = "adjr2")
# Final model -
house.final <- lm (price ~ sqft_living + grade + sqft_above)
# Final model -
house.final <- lm (price ~ sqft_living + grade + sqft_above, data = house)
summary(house.final)
par(mfrow = c(2,2))
plot(house.final)
# removing the influencial points
house <- house[- c(12778),]
# same model again
house.final <- lm (price ~ sqft_living + grade + sqft_above, data = house)
summary(house.final)
par(mfrow = c(2,2))
plot(house.final)
