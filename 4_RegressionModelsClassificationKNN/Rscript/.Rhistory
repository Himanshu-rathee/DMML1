library(dplyr)
am.mpg <- group_by(data = mtcars, am)
library(dplyr)
am.mpg <- group_by(mtcars, am)
library(dplyr)
am.mpg <- group_by(mtcars, am)
am.mpg
View(am.mpg)
View(am.mpg)
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(dplyr)
frq <- count(mtcars$am)
install.packages("plyr")
install.packages("plyr")
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
frq[which.max(frq$freq),1]
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
frq[which.max(frq$freq),1]
paste("Car heaviest => ", row.names(mtcars)[which.max(mtcars$wt)])
paste("Car fastest =>", row.names(mtcars)[which.max(mtcars$qsec)])
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
mean(auto.am$mpg)
View(auto.am)
View(auto.am)
View(manual.am)
View(manual.am)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
frq[which.max(frq$freq),1]
paste("Car heaviest => ", row.names(mtcars)[which.max(mtcars$wt)])
paste("Car fastest =>", row.names(mtcars)[which.max(mtcars$qsec)])
library(dplyr)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(dplyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(plyr)
frq <- count(mtcars$am)
frq <- count(mtcars$am)
remove.packages("plyr")
remove.packages("dplyr")
install.packages(c("boot", "foreign", "MASS", "nlme", "rlang", "tidyselect", "TSP", "vctrs"))
install.packages("dplyr")
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
library(dplyr)
frq <- count(mtcars$am)
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
library("plyr")
hp <- mtcars$hp
hp <- mtcars$hp
hp
hp <- mtcars$hp
length(hp[hp > mean(hp)])
sum(mtcars$hp > mean(mtcars$hp) & mtcars$cyl == 6)
sum(mtcars$hp > mean(mtcars$hp) & mtcars$cyl == 6 & mtcars$am == "Automatic")
mtcars[(mtcars$hp > mean(mtcars$hp) & mtcars$cyl == 6)]
sum(mtcars$hp > mean(mtcars$hp) & mtcars$cyl == 6)
boxplot(x = mtcars$mpg)
boxplot(x = mtcars$mpg ~ mtcars$cyl)
boxplot(mtcars$mpg ~ mtcars$cyl)
boxplot(x = mtcars$mpg ~ mtcars$cyl)
boxplot(mtcars$mpg ~ mtcars$cyl)
boxplot(mtcars$mpg ~ mtcars$cyl ~ mtcars$am)
boxplot(mtcars$mpg ~ mtcars$cyl)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# 1
mtcars$am == "Automatic"
# 1
sum(mtcars$am == "Automatic")
sum(mtcars$am == "Manual")
print("Manual cars are more")
print("Manual cars are more")
if(sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual"))
print("Automatic cars are more")
else
if(sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual"))
print("Automatic cars are more")
else
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels=c("Automatic","Manual"), levels=c(0,1))
if(sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual"))
print("Automatic cars are more")
else
if sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual")
source('~/.active-rstudio-document')
if sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# One time activity
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"), levels = c(0, 1))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
if (sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual")) {
print("Automatic cars are more")
} else {
print("Manual cars are more")
}
if (sum(mtcars$am == "Automatic") > sum(mtcars$am == "Manual")) {
print("Automatic cars are more")
} else {
print("Manual cars are more")
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# 2
print(which.max(mtcars$wt))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
paste("heaviest car :", row.names(mtcars)[which.max(mtcars$wt)])
source('~/.active-rstudio-document')
paste("heaviest car :", row.names(mtcars)[which.max(mtcars$wt)])
source('~/.active-rstudio-document')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Manual cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
library(dplyr)
library(dplyr)
auto.am <- filter(mtcars, am != "Manual")
manual.am <- filter(mtcars, am == "Manual")
if (mean(auto.am$mpg) > mean(manual.am$mpg)) {
print("Automatic cars have better mpg")
} else if (mean(auto.am$mpg) < mean(manual.am$mpg)) {
print("Manual cars have better mpg")
} else {
print("Both type of cars have same mpg")
}
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
print(length(mtcars$hp[mtcars$hp > mean(mtcars$hp)]))
print(length(mtcars$hp[mtcars$hp > mean(mtcars$hp)]))
print(length(mtcars$hp[mtcars$hp > mean(mtcars$hp)]))
print(length(mtcars$hp[mtcars$hp > mean(mtcars$hp)]))
print(length(mtcars$hp[mtcars$hp > mean(mtcars$hp)]))
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/2_ Data_Preprocessing_Transformation/R_Scripts/ExerciseLab_2.R')
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/4_RegressionModelsClassificationKNN/Rscript/DM_L04_Tasks.R', echo=TRUE)
View(Molten)
View(GoTJsonSeason4)
View(GoTJsonSeason4[["episodes"]])
View((GoTJsonSeason4[["episodes"]])[[13]][[1]])
checkLen(s1gender, 2)
length(s1gender[which(s1gender == 2)])
# Tasks
#1. Repeat for the other 5 seasons making a factor vector s3gender, . . . , s7gender
s1gender <- factor(getGender(GoTJsonSeason1$episodes$guest_stars))
s2gender <- factor(getGender(GoTJsonSeason2$episodes$guest_stars))
s3gender <- factor(getGender(GoTJsonSeason3$episodes$guest_stars))
s4gender <- factor(getGender(GoTJsonSeason4$episodes$guest_stars))
s5gender <- factor(getGender(GoTJsonSeason5$episodes$guest_stars))
s6gender <- factor(getGender(GoTJsonSeason6$episodes$guest_stars))
s7gender <- factor(getGender(GoTJsonSeason7$episodes$guest_stars))
s8gender <- factor(getGender(GoTJsonSeason8$episodes$guest_stars))
View(GotJson)
View(GotJson)
View(GoTWikipedia)
# 2. Compute the number of each gender and instantiate attibutes in our main GoT data.frame corresponding
#o 0 (unknown), 1 (female), 2 (male)
t <- table(s1gender)
t
# 2. Compute the number of each gender and instantiate attibutes in our main GoT data.frame corresponding
#o 0 (unknown), 1 (female), 2 (male)
t <- table(factor(s1gender))
t
s1gender
t
GoTWikipedia1 <- GoTWikipedia[1, ]
GoTWikipedia1$MaleExtras <- t[3]
GoTWikipedia1$FemaleExtras <- t[2]
GoTWikipedia1
# 2. Compute the number of each gender and instantiate attibutes in our main GoT data.frame corresponding
#o 0 (unknown), 1 (female), 2 (male)
t <- table(s1gender)
t
GoTWikipedia1 <- GoTWikipedia[1, ]
GoTWikipedia1$MaleExtras <- t[3]
GoTWikipedia1$FemaleExtras <- t[2]
GoTWikipedia1
# 2. Compute the number of each gender and instantiate attibutes in our main GoT data.frame corresponding
#o 0 (unknown), 1 (female), 2 (male)
gender.season <- list(s1gender, s2gender, s3gender, s4gender, s5gender, s6gender, s7gender, s8gender)
length(x[x==2])
# calculating total size of gender per season
gender.male <- unlist(lapply(X = gender.season , FUN = function(x){
length(x[x==2])
}))
gender.male
length(x[x==0])
gender.unknown <- unlist(lapply(X = gender.season , FUN = function(x){
length(x[x==0])
}))
gender.female <- unlist(lapply(X = gender.season , FUN = function(x){
length(x[x==1])
}))
totalExtras <- unlist(lapply(X = gender.season , FUN = function(x){
length(x)}))
# Adding to main data frame
GoTWikipedia$maleExtras <- gender.male
GoTWikipedia$femaleExtras <- gender.female
GoTWikipedia$unknownGenderExtras <- gender.unknown
GoTWikipedia$totalExtras <- totalExtras
View(GoTWikipedia)
#3. Plot Gender against Season to work out how the gender of extras / guest stars changes over the seasons
data <- data.frame(GoTWikipedia[, c("Season", "maleExtras", "femaleExtras", "unknownGenderExtra")])
#3. Plot Gender against Season to work out how the gender of extras / guest stars changes over the seasons
data <- data.frame(GoTWikipedia[, c("Season", "maleExtras", "femaleExtras", "unknownGenderExtra")])
str(GoTWikipedia)
#3. Plot Gender against Season to work out how the gender of extras / guest stars changes over the seasons
data <- data.frame(GoTWikipedia[, c("Season", "maleExtras", "femaleExtras", "unknownGenderExtras")])
data$Season <- as.numeric(data$Season)
Molten <- melt(data = data, id.vars = "Season")
Molten
ggplot(data = Molten, aes(x = Season, y = value, colour = variable)) + geom_line() + scale_x_continuous(breaks=c(1:8)) + ylab("Gender of extras (num)")
remove(list = ls())
library(ISLR)
data("Hitters")
Hitters <- na.omit(Hitters)
View(Hitters)
x <- model.matrix(Salary ~.,Hitters)[,-1]
View(x)
help("set.seed")
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/5_RegressionModels_2/DM_Lab05_part2.R', echo=TRUE)
train
test
y.test
test <- (!train)
test
test <- (-train)
train
test
test <- (-train)
View(test)
train <- sample(x = 1:nrow(x), size = nrow(x)/2)
train <- sample(x = 1:nrow(x), size = nrow(x)/2)
View(train)
View(test)
train <- sample(x = 1:nrow(x), size = nrow(x)/2)
test <- (-train)
View(train)
View(test)
str(train)
View(test)
str(test)
aax <-[train]
aax <-x[train]
bbx <- x[-train]
aax <-x[train]
aax
bbx
install.packages("pls")
# PCR
library(pls)
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/5_RegressionModels_2/DM_Lab05_part2.R', echo=TRUE)
set.seed(2)
pcr.fit <- pls::pcr(method = Salary ~ . , data = Hitters, scale = TRUE, validation = "CV")
pcr.fit <- pls::pcr(Salary ~ . , data = Hitters, scale = TRUE, validation = "CV")
summary(pcr.fit)
summary(pcr.fit)
validationplot(pcr.fit,val.type = "MSEP")
train
test
summary(pcr.fit)
# evaluating the training data
pcr.fit <- pcr(Salary ~ . , data = Hitters, subset = train, scale = TRUE, validation = "CV")
validationplot(pcr.fit, val.type = "MSEP")
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 7)
# calculating mean
mean((pcr.pred - y.test)^2)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 5)
# calculating mean
mean((pcr.pred - y.test)^2)
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
# calculating mean
mean((pcr.pred - y.test)^2)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 7)
# calculating mean
mean((pcr.pred - y.test)^2)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 3)
# calculating mean
mean((pcr.pred - y.test)^2)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 8)
# calculating mean
mean((pcr.pred - y.test)^2)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict(object = pcr.fit, newdata = x[test,], ncomp = 7)
# calculating mean
mean((pcr.pred - y.test)^2)
summary(pcr.fit)
# Now we find that the lowest cross-validation error occurs when M = 7 component are used. We compute the test MSE as follows.
pcr.pred <- predict( pcr.fit, x[test,], ncomp = 7)
# calculating mean
mean((pcr.pred - y.test)^2)
# fitting complete data on M=7
pcr.fit <- pls::pcr(y ~ x, scale = TRUE, ncomp = 7)
# PCR
library(pls)
summary(pcr.fit)
# PLS modeling
set.seed(1)
pls.fit <- pls::plsr(Salary ~ . , data = Hitters, subset = train, scale = TRUE, validation = "CV")
summary(pls.fit)
pls.predict <- predict(pls.fit , newdata = x[test,], ncomp = 2)
summary(pls.predict)
# checking MSEP
mean((pls.predict - y.test)^2)
# for whole data set
pls.fit <- pls::plsr(y~x, scale = TRUE, ncomp = 2)
summary(pls.fit)
# for whole data set
pls.fit <- pls::plsr(Salary ~ . , data = Hitters, scale = TRUE, ncomp = 2)
summary(pls.fit)
summary(pcr.fit)
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/5_RegressionModels_2/DM_Lab05_part3.R', echo=TRUE)
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/5_RegressionModels_2/DM_Lab05_part3.R', echo=TRUE)
source('~/Documents/MSC/Sem 1/Data Mining & Machine Learning/5_RegressionModels_2/DM_Lab05_part3.R', echo=TRUE)
X_Boston = Boston$lstat
Y_Boston = Boston$medv
# create a sequence for the range of Boston lstat column
lstat_grid <- seq(from = range(X_Boston)[1], to = range(X_Boston)[2], by = 0.01)
lstat_grid
length(lstat_grid)
install.packages(FNN)
install.packages("FNN")
length(X_Boston)
# predicting with different K values
pred_001 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 1)
X_Boston = Boston["lstat"]
Y_Boston = Boston$medv
View(X_Boston)
typeof(X_Boston)
# create a sequence for the range of Boston lstat column
lstat_grid <- seq(from = range(X_Boston$lstat)[1], to = range(X_Boston$lstat)[2], by = 0.01)
# predicting with different K values
pred_001 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 1)
# create a sequence for the range of Boston lstat column
lstat_grid <- data.frame(lstat = (seq(from = range(X_Boston$lstat)[1], to = range(X_Boston$lstat)[2], by = 0.01)))
# predicting with different K values
pred_001 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 1)
pred_001
View(pred_001)
pred_001
pred_005 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 5)
pred_050 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 50)
pred_100 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 100)
pred_506 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 506)
pred_010 <- FNN::knn.reg(train = X_Boston, test = lstat_grid, y = Y_Boston, k = 10)
# visulaizing
par(c(3,2))
# visulaizing
par(mfrow = c(3,2))
plot(medv ~ lstat, data = Boston, main = "k = 1", col = "dodgerblue", cex = 0.8)
line(x = lstat_grid$lstat, y = pred_001, col = "darkorange", lwd = 0.25)
line(x = lstat_grid$lstat, y = pred_001, col = "darkorange", lwd = 0.25)
lines(lstat_grid$lstat, pred_001$pred, col = "darkorange", lwd = 0.25)
plot(medv ~ lstat, data = Boston, cex = .8, col = "dodgerblue", main = "k = 5")
lines(lstat_grid$lstat, pred_005$pred, col = "darkorange", lwd = 0.75)
plot(medv ~ lstat, data = Boston, cex = .8, col = "dodgerblue", main = "k = 10")
lines(lstat_grid$lstat, pred_010$pred, col = "darkorange", lwd = 1)
plot(medv ~ lstat, data = Boston, cex = .8, col = "dodgerblue", main = "k = 25")
lines(lstat_grid$lstat, pred_050$pred, col = "darkorange", lwd = 1.5)
plot(medv ~ lstat, data = Boston, cex = .8, col = "dodgerblue", main = "k = 50")
lines(lstat_grid$lstat, pred_100$pred, col = "darkorange", lwd = 2)
plot(medv ~ lstat, data = Boston, cex = .8, col = "dodgerblue", main = "k = 506")
lines(lstat_grid$lstat, pred_506$pred, col = "darkorange", lwd = 2)
